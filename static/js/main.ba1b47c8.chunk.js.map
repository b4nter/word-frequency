{"version":3,"sources":["components/Outlet.js","components/NewsOutlets.js","components/Chart.js","App.js","serviceWorker.js","index.js"],"names":["Outlet","this","props","outlet","name","id","onClick","selectOutlet","bind","style","btnStyle","Component","display","padding","margin","NewsOutlets","newsOutlets","map","key","Chart","setState","chartData","className","data","options","line","borderColor","title","text","fontSize","scales","yAxes","ticks","beginAtZero","App","state","CORS_PROXY","labels","datasets","label","fetch","then","res","json","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"wMAEaA,EAAb,uKACc,IAAD,EACcC,KAAKC,MAAMC,OAAvBC,EADF,EACEA,KAAMC,EADR,EACQA,GACb,OACI,4BAAQC,QAASL,KAAKC,MAAMK,aAAaC,KAAKP,KAAMI,GAAKI,MAAOC,GAAWN,OAJvF,GAA4BO,aAStBD,EAAW,CACbE,QAAS,SACTC,QAAS,OACTC,OAAQ,QAGGd,ICDAe,EAbf,uKAEc,IAAD,OAEL,OAAOd,KAAKC,MAAMc,YAAYC,KAAI,SAACd,GAAD,OAC9B,kBAAC,EAAD,CACIe,IAAKf,EAAOE,GACZF,OAAQA,EACRI,aAAc,EAAKL,MAAMK,sBARzC,GAAiCI,a,QCiClBQ,EAhCf,kLAGQlB,KAAKmB,SAAS,CAACC,UAAWpB,KAAKC,MAAMmB,cAH7C,+BAMQ,OACI,yBAAKC,UAAW,SACZ,kBAAC,MAAD,CACIC,KAAMtB,KAAKC,MAAMmB,UACjBG,QAAS,CACLC,KAAM,CACFC,YAAa,WAEjBC,MAAM,CACFf,SAAQ,EACRgB,KAAM3B,KAAKC,MAAME,KACjByB,SAAS,IAEbC,OAAQ,CACRC,MAAO,CAAC,CACJC,MAAO,CACHC,aAAa,cAtB7C,GAA2BtB,aCwDZuB,G,mNApDbC,MAAQ,CACNC,WAAY,uCACZf,UAAW,CACTgB,OAAQ,GACRC,SAAU,CACN,CACIC,MAAO,iBACPhB,KAAM,MAIhBnB,KAAM,GACNY,YAAa,I,EAWdT,aAAe,SAACF,GACd,EAAKe,SAAS,CAACC,UAAW,EAAKc,MAAMnB,YAAYX,EAAI,GAAGgB,YACxD,EAAKD,SAAS,CAAChB,KAAM,EAAK+B,MAAMnB,YAAYX,EAAI,GAAGD,OAGnDoC,MAAM,EAAKL,MAAMC,WAAa,oEAC7BK,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAzB,GACJ,EAAKI,SAAS,CAACJ,YAAaA,Q,kEAhBZ,IAAD,OAClBwB,MAAMvC,KAAKkC,MAAMC,WAAa,6DAC3BK,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAzB,GACJ,EAAKI,SAAS,CAACJ,YAAaA,S,+BAgBzB,IAAD,EACiCf,KAAKkC,MAArCnB,EADD,EACCA,YAAaK,EADd,EACcA,UAAWjB,EADzB,EACyBA,KAC/B,OACE,yBAAKkB,UAAU,OACb,kBAAC,EAAD,CACEN,YAAaA,EACbT,aAAcN,KAAKM,eACrB,6BACA,yBAAKe,UAAW,aAChB,kBAAC,EAAD,CAAOD,UAAWA,EAAWjB,KAAMA,U,GA7CzBO,cCKEiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBf,MAAK,SAAAgB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.ba1b47c8.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nexport class Outlet extends Component {\r\n    render() {\r\n        const {name, id} = this.props.outlet\r\n        return (\r\n            <button onClick={this.props.selectOutlet.bind(this, id)} style={btnStyle}>{name}</button>\r\n            )\r\n    }\r\n}\r\n\r\nconst btnStyle = {\r\n    display: \"inline\",\r\n    padding: \"1rem\",\r\n    margin: \"1rem\"\r\n}\r\n\r\nexport default Outlet\r\n","import React, { Component } from 'react'\r\nimport Outlet from './Outlet'\r\n\r\nexport class NewsOutlets extends Component {\r\n\r\n    render() {\r\n        \r\n        return this.props.newsOutlets.map((outlet) => (\r\n            <Outlet \r\n                key={outlet.id} \r\n                outlet={outlet}\r\n                selectOutlet={this.props.selectOutlet}/>\r\n        ));\r\n    }\r\n}\r\n\r\nexport default NewsOutlets\r\n","import React, { Component } from 'react'\r\nimport {Bar, Doughnut, HorizontalBar } from 'react-chartjs-2'\r\n\r\n\r\nexport class Chart extends Component {\r\n\r\n    componentDidMount(){\r\n        this.setState({chartData: this.props.chartData})\r\n    }\r\n    render() {\r\n        return (\r\n            <div className =\"chart\">\r\n                <Bar \r\n                    data={this.props.chartData}\r\n                    options={{\r\n                        line: {\r\n                            borderColor: '#F85F73',\r\n                           },\r\n                        title:{\r\n                            display:true,\r\n                            text: this.props.name,\r\n                            fontSize:25\r\n                          },\r\n                        scales: {\r\n                        yAxes: [{\r\n                            ticks: {\r\n                                beginAtZero: true\r\n                            }\r\n                        }]\r\n                    }}}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Chart\r\n","import React, { Component } from 'react';\r\nimport NewsOutlets from './components/NewsOutlets';\r\nimport Chart from './components/Chart'\r\n\r\nimport './App.css';\r\n\r\n\r\nclass App extends Component {\r\n  state = { \r\n    CORS_PROXY: \"https://cors-anywhere.herokuapp.com/\",\r\n    chartData: {\r\n      labels: [],\r\n      datasets: [\r\n          {\r\n              label: \"Word Frequency\",\r\n              data: []\r\n          }\r\n      ],\r\n    },\r\n    name: \"\",\r\n    newsOutlets: []\r\n   }\r\n\r\n   componentDidMount(){\r\n    fetch(this.state.CORS_PROXY + 'https://desolate-dawn-64848.herokuapp.com/api/newsoutlets')\r\n      .then(res => res.json())\r\n      .then(newsOutlets => {\r\n        this.setState({newsOutlets: newsOutlets})\r\n      })\r\n   }\r\n\r\n   selectOutlet = (id) => {\r\n     this.setState({chartData: this.state.newsOutlets[id -1].chartData})\r\n     this.setState({name: this.state.newsOutlets[id -1].name})\r\n\r\n     // fetching data again because of bug in react-chartjs-2 github issue #438\r\n     fetch(this.state.CORS_PROXY + 'https://desolate-dawn-64848.herokuapp.com/api/getnewsoutletsdata')\r\n     .then(res => res.json())\r\n     .then(newsOutlets => {\r\n       this.setState({newsOutlets: newsOutlets})\r\n     })\r\n   }\r\n\r\n  render(){\r\n    const {newsOutlets, chartData, name} = this.state;\r\n    return (\r\n      <div className=\"App\">\r\n        <NewsOutlets \r\n          newsOutlets={newsOutlets} \r\n          selectOutlet={this.selectOutlet}/>\r\n        <br/>\r\n        <div className =\"container\">\r\n        <Chart chartData={chartData} name={name} />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}